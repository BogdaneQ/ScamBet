@model ScamBet.Entities.Roulette

@{
    ViewData["Title"] = "Play Roulette";
}
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<h3>Last Rolls:</h3>
<div class="recent-results">
    @if (ViewBag.RecentBets != null)
    {
        <div class="recent-rolls-container">
            @foreach (var result in ViewBag.RecentBets)
            {
                var resultParts = result.result_r.Split(':');
                var number = resultParts[0];
                var color = resultParts[1];
                <div class="recent-roll @(color)">
                    @number
                </div>
            }
        </div>
    }
    else
    {
        <p>No recent results available.</p>
    }
</div>

<h2>Roulette</h2>

<div class="roulette-container">
    <div class="container-first">
        <div class="zero-item" data-value="0">
            <div class="value">0</div>
        </div>
        @for (int i = 1; i <= 36; i++)
        {
            <div class="@((i == 1 || i == 3 || i == 5 || i == 7 || i == 9 || i == 12 || i == 14 || i == 16 || i == 18 || i == 19 || i == 21 || i == 23 || i == 25 || i == 27 || i == 30 || i == 32 || i == 34 || i == 36) ? "red-item" : "black-item")" data-value="@i">
                <div class="value">@i</div>
            </div>
        }
        <div class="column-item">
            <div class="value">2-1</div>
        </div>
        <div class="column-item">
            <div class="value">2-1</div>
        </div>
        <div class="column-item">
            <div class="value">2-1</div>
        </div>
    </div>
    <div class="container-second">
        <div class="doz-item" data-type="dozen" data-value="1st">
            <div>1st 12</div>
        </div>
        <div class="doz-item" data-type="dozen" data-value="2nd">
            <div>2nd 12</div>
        </div>
        <div class="doz-item" data-type="dozen" data-value="3rd">
            <div>3rd 12</div>
        </div>
    </div>
    <div class="container-third">
        <div class="outside-section" data-type="half" data-value="1-18">
            <div>1-18</div>
        </div>
        <div class="outside-section" data-type="odd_even" data-value="even">
            <div>EVEN</div>
        </div>
        <div class="outside-section" data-type="color" data-value="red">
            <div class="rhomb-red"></div>
        </div>
        <div class="outside-section" data-type="color" data-value="black">
            <div class="rhomb-black"></div>
        </div>
        <div class="outside-section" data-type="odd_even" data-value="odd">
            <div>ODD</div>
        </div>
        <div class="outside-section" data-type="half" data-value="19-36">
            <div>19-36</div>
        </div>
    </div>
    <div class="result-info">
        <form id="betForm" method="post" asp-controller="Roulette" asp-action="PlaceBet">
            <input type="hidden" id="betType" name="betType" value="">
            <input type="hidden" id="betValue" name="betValue" value="">
            <div class="form-group">
                <label for="betAmount">Bet Amount</label>
                <input type="number" id="betAmount" name="betAmount" class="form-control" placeholder="Enter bet amount">
            </div>
            <button type="submit" class="btn btn-primary">Place Bet</button>
        </form>

        @if (ViewBag.RouletteResult != null)
        {
            <h3>Roulette Result: @ViewBag.RouletteResult</h3>
            <h3>@(ViewBag.IsWin ? "You won!" : "You lost!")</h3>
            <h3>Your winnings: @ViewBag.Winnings</h3>
            <h3>Your new balance: @ViewBag.Balance</h3>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.zero-item, .red-item, .black-item, .column-item, .doz-item, .outside-section').forEach(sector => {
            sector.addEventListener('click', function () {
                const type = this.dataset.type || 'number';
                const value = this.dataset.value || this.innerText.trim();
                document.getElementById('betType').value = type;
                document.getElementById('betValue').value = value;

                document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'));
                this.classList.add('selected');
            });
        });

        document.getElementById('betForm').addEventListener('submit', function (event) {
            if (!document.getElementById('betType').value || !document.getElementById('betValue').value) {
                alert('Please select a bet before placing your bet.');
                event.preventDefault();
            }
        });

        @if (ViewBag.RouletteResult != null)
        {
            <text>
                            const resultValue = "@ViewBag.RouletteResult".split(':')[0];
            const resultElement = document.querySelector(`[data-value="${resultValue}"]`);
            if (resultElement) {
                resultElement.classList.add('flash');
                setTimeout(() => {
                    resultElement.classList.remove('flash');
                }, 6000);
            }
            </text>
        }
    </script>
}
