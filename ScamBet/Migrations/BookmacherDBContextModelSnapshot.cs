// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScamBet.Entities;

#nullable disable

namespace ScamBet.Migrations
{
    [DbContext(typeof(BookmacherDBContext))]
    partial class BookmacherDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScamBet.Entitties.Account", b =>
                {
                    b.Property<int>("user_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_ID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_ID");

                    b.ToTable("accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ScamBet.Entitties.Bet", b =>
                {
                    b.Property<int>("betID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("betID"));

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("choosen_team")
                        .HasColumnType("int");

                    b.Property<int>("matchID")
                        .HasColumnType("int");

                    b.Property<double>("ratio")
                        .HasColumnType("float");

                    b.Property<string>("user_ID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("value")
                        .HasColumnType("float");

                    b.HasKey("betID");

                    b.ToTable("bets");
                });

            modelBuilder.Entity("ScamBet.Entitties.Match", b =>
                {
                    b.Property<int>("matchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("matchID"));

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<int>("trID")
                        .HasColumnType("int");

                    b.HasKey("matchID");

                    b.HasIndex("trID");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("ScamBet.Entitties.Roulette", b =>
                {
                    b.Property<int>("rouletteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rouletteID"));

                    b.Property<double>("balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("rouletteID");

                    b.ToTable("roulettes");
                });

            modelBuilder.Entity("ScamBet.Entitties.Team", b =>
                {
                    b.Property<int>("teamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("teamID"));

                    b.Property<int>("aggresion")
                        .HasColumnType("int");

                    b.Property<int>("attack")
                        .HasColumnType("int");

                    b.Property<int>("defence")
                        .HasColumnType("int");

                    b.Property<int>("middle")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("teamID");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("ScamBet.Entitties.Team_results", b =>
                {
                    b.Property<int>("trID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("trID"));

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int>("corners")
                        .HasColumnType("int");

                    b.Property<int>("fouls")
                        .HasColumnType("int");

                    b.Property<int>("goals")
                        .HasColumnType("int");

                    b.Property<int>("red_cards")
                        .HasColumnType("int");

                    b.Property<int>("shots")
                        .HasColumnType("int");

                    b.Property<int>("shots_ontarget")
                        .HasColumnType("int");

                    b.Property<bool>("winner")
                        .HasColumnType("bit");

                    b.Property<int>("yellow_cards")
                        .HasColumnType("int");

                    b.HasKey("trID");

                    b.HasIndex("TeamID");

                    b.ToTable("teams_results");
                });

            modelBuilder.Entity("ScamBet.Entitties.Admin", b =>
                {
                    b.HasBaseType("ScamBet.Entitties.Account");

                    b.Property<int>("admin_rank")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("ScamBet.Entitties.User", b =>
                {
                    b.HasBaseType("ScamBet.Entitties.Account");

                    b.Property<double>("acc_balace")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("ScamBet.Entitties.Match", b =>
                {
                    b.HasOne("ScamBet.Entitties.Team_results", "Team_results")
                        .WithMany()
                        .HasForeignKey("trID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team_results");
                });

            modelBuilder.Entity("ScamBet.Entitties.Team_results", b =>
                {
                    b.HasOne("ScamBet.Entitties.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
